// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMsg.protoc

#ifndef PROTOBUF_INCLUDED_GameMsg_2eprotoc
#define PROTOBUF_INCLUDED_GameMsg_2eprotoc

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameMsg_2eprotoc 

namespace protobuf_GameMsg_2eprotoc {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameMsg_2eprotoc
namespace GameMsg {
class BroadCast;
class BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class Plyr;
class PlyrDefaultTypeInternal;
extern PlyrDefaultTypeInternal _Plyr_default_instance_;
class PlyrPos;
class PlyrPosDefaultTypeInternal;
extern PlyrPosDefaultTypeInternal _PlyrPos_default_instance_;
class SyncPlyrId;
class SyncPlyrIdDefaultTypeInternal;
extern SyncPlyrIdDefaultTypeInternal _SyncPlyrId_default_instance_;
class SyncPlyrs;
class SyncPlyrsDefaultTypeInternal;
extern SyncPlyrsDefaultTypeInternal _SyncPlyrs_default_instance_;
}  // namespace GameMsg
namespace google {
namespace protobuf {
template<> ::GameMsg::BroadCast* Arena::CreateMaybeMessage<::GameMsg::BroadCast>(Arena*);
template<> ::GameMsg::Chat* Arena::CreateMaybeMessage<::GameMsg::Chat>(Arena*);
template<> ::GameMsg::Plyr* Arena::CreateMaybeMessage<::GameMsg::Plyr>(Arena*);
template<> ::GameMsg::PlyrPos* Arena::CreateMaybeMessage<::GameMsg::PlyrPos>(Arena*);
template<> ::GameMsg::SyncPlyrId* Arena::CreateMaybeMessage<::GameMsg::SyncPlyrId>(Arena*);
template<> ::GameMsg::SyncPlyrs* Arena::CreateMaybeMessage<::GameMsg::SyncPlyrs>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace GameMsg {

// ===================================================================

class SyncPlyrId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMsg.SyncPlyrId) */ {
 public:
  SyncPlyrId();
  virtual ~SyncPlyrId();

  SyncPlyrId(const SyncPlyrId& from);

  inline SyncPlyrId& operator=(const SyncPlyrId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncPlyrId(SyncPlyrId&& from) noexcept
    : SyncPlyrId() {
    *this = ::std::move(from);
  }

  inline SyncPlyrId& operator=(SyncPlyrId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPlyrId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlyrId* internal_default_instance() {
    return reinterpret_cast<const SyncPlyrId*>(
               &_SyncPlyrId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SyncPlyrId* other);
  friend void swap(SyncPlyrId& a, SyncPlyrId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncPlyrId* New() const final {
    return CreateMaybeMessage<SyncPlyrId>(NULL);
  }

  SyncPlyrId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlyrId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncPlyrId& from);
  void MergeFrom(const SyncPlyrId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlyrId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usrName = 2;
  void clear_usrname();
  static const int kUsrNameFieldNumber = 2;
  const ::std::string& usrname() const;
  void set_usrname(const ::std::string& value);
  #if LANG_CXX11
  void set_usrname(::std::string&& value);
  #endif
  void set_usrname(const char* value);
  void set_usrname(const char* value, size_t size);
  ::std::string* mutable_usrname();
  ::std::string* release_usrname();
  void set_allocated_usrname(::std::string* usrname);

  // int32 plyrId = 1;
  void clear_plyrid();
  static const int kPlyrIdFieldNumber = 1;
  ::google::protobuf::int32 plyrid() const;
  void set_plyrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMsg.SyncPlyrId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usrname_;
  ::google::protobuf::int32 plyrid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameMsg_2eprotoc::TableStruct;
};
// -------------------------------------------------------------------

class Chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMsg.Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Chat* other);
  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(NULL);
  }

  Chat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:GameMsg.Chat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameMsg_2eprotoc::TableStruct;
};
// -------------------------------------------------------------------

class PlyrPos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMsg.PlyrPos) */ {
 public:
  PlyrPos();
  virtual ~PlyrPos();

  PlyrPos(const PlyrPos& from);

  inline PlyrPos& operator=(const PlyrPos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlyrPos(PlyrPos&& from) noexcept
    : PlyrPos() {
    *this = ::std::move(from);
  }

  inline PlyrPos& operator=(PlyrPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlyrPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlyrPos* internal_default_instance() {
    return reinterpret_cast<const PlyrPos*>(
               &_PlyrPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlyrPos* other);
  friend void swap(PlyrPos& a, PlyrPos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlyrPos* New() const final {
    return CreateMaybeMessage<PlyrPos>(NULL);
  }

  PlyrPos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlyrPos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlyrPos& from);
  void MergeFrom(const PlyrPos& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlyrPos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float V = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  float v() const;
  void set_v(float value);

  // int32 bloodValue = 5;
  void clear_bloodvalue();
  static const int kBloodValueFieldNumber = 5;
  ::google::protobuf::int32 bloodvalue() const;
  void set_bloodvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMsg.PlyrPos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float v_;
  ::google::protobuf::int32 bloodvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameMsg_2eprotoc::TableStruct;
};
// -------------------------------------------------------------------

class Plyr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMsg.Plyr) */ {
 public:
  Plyr();
  virtual ~Plyr();

  Plyr(const Plyr& from);

  inline Plyr& operator=(const Plyr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Plyr(Plyr&& from) noexcept
    : Plyr() {
    *this = ::std::move(from);
  }

  inline Plyr& operator=(Plyr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Plyr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plyr* internal_default_instance() {
    return reinterpret_cast<const Plyr*>(
               &_Plyr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Plyr* other);
  friend void swap(Plyr& a, Plyr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Plyr* New() const final {
    return CreateMaybeMessage<Plyr>(NULL);
  }

  Plyr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Plyr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Plyr& from);
  void MergeFrom(const Plyr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plyr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usrName = 3;
  void clear_usrname();
  static const int kUsrNameFieldNumber = 3;
  const ::std::string& usrname() const;
  void set_usrname(const ::std::string& value);
  #if LANG_CXX11
  void set_usrname(::std::string&& value);
  #endif
  void set_usrname(const char* value);
  void set_usrname(const char* value, size_t size);
  ::std::string* mutable_usrname();
  ::std::string* release_usrname();
  void set_allocated_usrname(::std::string* usrname);

  // .GameMsg.PlyrPos plyrPos = 2;
  bool has_plyrpos() const;
  void clear_plyrpos();
  static const int kPlyrPosFieldNumber = 2;
  private:
  const ::GameMsg::PlyrPos& _internal_plyrpos() const;
  public:
  const ::GameMsg::PlyrPos& plyrpos() const;
  ::GameMsg::PlyrPos* release_plyrpos();
  ::GameMsg::PlyrPos* mutable_plyrpos();
  void set_allocated_plyrpos(::GameMsg::PlyrPos* plyrpos);

  // int32 plyrId = 1;
  void clear_plyrid();
  static const int kPlyrIdFieldNumber = 1;
  ::google::protobuf::int32 plyrid() const;
  void set_plyrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameMsg.Plyr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usrname_;
  ::GameMsg::PlyrPos* plyrpos_;
  ::google::protobuf::int32 plyrid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameMsg_2eprotoc::TableStruct;
};
// -------------------------------------------------------------------

class SyncPlyrs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMsg.SyncPlyrs) */ {
 public:
  SyncPlyrs();
  virtual ~SyncPlyrs();

  SyncPlyrs(const SyncPlyrs& from);

  inline SyncPlyrs& operator=(const SyncPlyrs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncPlyrs(SyncPlyrs&& from) noexcept
    : SyncPlyrs() {
    *this = ::std::move(from);
  }

  inline SyncPlyrs& operator=(SyncPlyrs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPlyrs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlyrs* internal_default_instance() {
    return reinterpret_cast<const SyncPlyrs*>(
               &_SyncPlyrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SyncPlyrs* other);
  friend void swap(SyncPlyrs& a, SyncPlyrs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncPlyrs* New() const final {
    return CreateMaybeMessage<SyncPlyrs>(NULL);
  }

  SyncPlyrs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlyrs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncPlyrs& from);
  void MergeFrom(const SyncPlyrs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlyrs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameMsg.Plyr plyrs = 1;
  int plyrs_size() const;
  void clear_plyrs();
  static const int kPlyrsFieldNumber = 1;
  ::GameMsg::Plyr* mutable_plyrs(int index);
  ::google::protobuf::RepeatedPtrField< ::GameMsg::Plyr >*
      mutable_plyrs();
  const ::GameMsg::Plyr& plyrs(int index) const;
  ::GameMsg::Plyr* add_plyrs();
  const ::google::protobuf::RepeatedPtrField< ::GameMsg::Plyr >&
      plyrs() const;

  // @@protoc_insertion_point(class_scope:GameMsg.SyncPlyrs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::GameMsg::Plyr > plyrs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameMsg_2eprotoc::TableStruct;
};
// -------------------------------------------------------------------

class BroadCast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameMsg.BroadCast) */ {
 public:
  BroadCast();
  virtual ~BroadCast();

  BroadCast(const BroadCast& from);

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadCast& default_instance();

  enum DataCase {
    kPlyrChat = 3,
    kPlyrPos = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BroadCast* other);
  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadCast* New() const final {
    return CreateMaybeMessage<BroadCast>(NULL);
  }

  BroadCast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadCast& from);
  void MergeFrom(const BroadCast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usrName = 6;
  void clear_usrname();
  static const int kUsrNameFieldNumber = 6;
  const ::std::string& usrname() const;
  void set_usrname(const ::std::string& value);
  #if LANG_CXX11
  void set_usrname(::std::string&& value);
  #endif
  void set_usrname(const char* value);
  void set_usrname(const char* value, size_t size);
  ::std::string* mutable_usrname();
  ::std::string* release_usrname();
  void set_allocated_usrname(::std::string* usrname);

  // int32 plyrId = 1;
  void clear_plyrid();
  static const int kPlyrIdFieldNumber = 1;
  ::google::protobuf::int32 plyrid() const;
  void set_plyrid(::google::protobuf::int32 value);

  // int32 bcType = 2;
  void clear_bctype();
  static const int kBcTypeFieldNumber = 2;
  ::google::protobuf::int32 bctype() const;
  void set_bctype(::google::protobuf::int32 value);

  // .GameMsg.Chat plyrChat = 3;
  bool has_plyrchat() const;
  void clear_plyrchat();
  static const int kPlyrChatFieldNumber = 3;
  private:
  const ::GameMsg::Chat& _internal_plyrchat() const;
  public:
  const ::GameMsg::Chat& plyrchat() const;
  ::GameMsg::Chat* release_plyrchat();
  ::GameMsg::Chat* mutable_plyrchat();
  void set_allocated_plyrchat(::GameMsg::Chat* plyrchat);

  // .GameMsg.PlyrPos plyrPos = 4;
  bool has_plyrpos() const;
  void clear_plyrpos();
  static const int kPlyrPosFieldNumber = 4;
  private:
  const ::GameMsg::PlyrPos& _internal_plyrpos() const;
  public:
  const ::GameMsg::PlyrPos& plyrpos() const;
  ::GameMsg::PlyrPos* release_plyrpos();
  ::GameMsg::PlyrPos* mutable_plyrpos();
  void set_allocated_plyrpos(::GameMsg::PlyrPos* plyrpos);

  // int32 actionData = 5;
  private:
  bool has_actiondata() const;
  public:
  void clear_actiondata();
  static const int kActionDataFieldNumber = 5;
  ::google::protobuf::int32 actiondata() const;
  void set_actiondata(::google::protobuf::int32 value);

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:GameMsg.BroadCast)
 private:
  void set_has_plyrchat();
  void set_has_plyrpos();
  void set_has_actiondata();

  inline bool has_Data() const;
  inline void clear_has_Data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usrname_;
  ::google::protobuf::int32 plyrid_;
  ::google::protobuf::int32 bctype_;
  union DataUnion {
    DataUnion() {}
    ::GameMsg::Chat* plyrchat_;
    ::GameMsg::PlyrPos* plyrpos_;
    ::google::protobuf::int32 actiondata_;
  } Data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_GameMsg_2eprotoc::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPlyrId

// int32 plyrId = 1;
inline void SyncPlyrId::clear_plyrid() {
  plyrid_ = 0;
}
inline ::google::protobuf::int32 SyncPlyrId::plyrid() const {
  // @@protoc_insertion_point(field_get:GameMsg.SyncPlyrId.plyrId)
  return plyrid_;
}
inline void SyncPlyrId::set_plyrid(::google::protobuf::int32 value) {
  
  plyrid_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.SyncPlyrId.plyrId)
}

// string usrName = 2;
inline void SyncPlyrId::clear_usrname() {
  usrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncPlyrId::usrname() const {
  // @@protoc_insertion_point(field_get:GameMsg.SyncPlyrId.usrName)
  return usrname_.GetNoArena();
}
inline void SyncPlyrId::set_usrname(const ::std::string& value) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMsg.SyncPlyrId.usrName)
}
#if LANG_CXX11
inline void SyncPlyrId::set_usrname(::std::string&& value) {
  
  usrname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameMsg.SyncPlyrId.usrName)
}
#endif
inline void SyncPlyrId::set_usrname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMsg.SyncPlyrId.usrName)
}
inline void SyncPlyrId::set_usrname(const char* value, size_t size) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMsg.SyncPlyrId.usrName)
}
inline ::std::string* SyncPlyrId::mutable_usrname() {
  
  // @@protoc_insertion_point(field_mutable:GameMsg.SyncPlyrId.usrName)
  return usrname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncPlyrId::release_usrname() {
  // @@protoc_insertion_point(field_release:GameMsg.SyncPlyrId.usrName)
  
  return usrname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPlyrId::set_allocated_usrname(::std::string* usrname) {
  if (usrname != NULL) {
    
  } else {
    
  }
  usrname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usrname);
  // @@protoc_insertion_point(field_set_allocated:GameMsg.SyncPlyrId.usrName)
}

// -------------------------------------------------------------------

// Chat

// string content = 1;
inline void Chat::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chat::content() const {
  // @@protoc_insertion_point(field_get:GameMsg.Chat.content)
  return content_.GetNoArena();
}
inline void Chat::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMsg.Chat.content)
}
#if LANG_CXX11
inline void Chat::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameMsg.Chat.content)
}
#endif
inline void Chat::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMsg.Chat.content)
}
inline void Chat::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMsg.Chat.content)
}
inline ::std::string* Chat::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:GameMsg.Chat.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_content() {
  // @@protoc_insertion_point(field_release:GameMsg.Chat.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:GameMsg.Chat.content)
}

// -------------------------------------------------------------------

// PlyrPos

// float X = 1;
inline void PlyrPos::clear_x() {
  x_ = 0;
}
inline float PlyrPos::x() const {
  // @@protoc_insertion_point(field_get:GameMsg.PlyrPos.X)
  return x_;
}
inline void PlyrPos::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.PlyrPos.X)
}

// float Y = 2;
inline void PlyrPos::clear_y() {
  y_ = 0;
}
inline float PlyrPos::y() const {
  // @@protoc_insertion_point(field_get:GameMsg.PlyrPos.Y)
  return y_;
}
inline void PlyrPos::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.PlyrPos.Y)
}

// float Z = 3;
inline void PlyrPos::clear_z() {
  z_ = 0;
}
inline float PlyrPos::z() const {
  // @@protoc_insertion_point(field_get:GameMsg.PlyrPos.Z)
  return z_;
}
inline void PlyrPos::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.PlyrPos.Z)
}

// float V = 4;
inline void PlyrPos::clear_v() {
  v_ = 0;
}
inline float PlyrPos::v() const {
  // @@protoc_insertion_point(field_get:GameMsg.PlyrPos.V)
  return v_;
}
inline void PlyrPos::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.PlyrPos.V)
}

// int32 bloodValue = 5;
inline void PlyrPos::clear_bloodvalue() {
  bloodvalue_ = 0;
}
inline ::google::protobuf::int32 PlyrPos::bloodvalue() const {
  // @@protoc_insertion_point(field_get:GameMsg.PlyrPos.bloodValue)
  return bloodvalue_;
}
inline void PlyrPos::set_bloodvalue(::google::protobuf::int32 value) {
  
  bloodvalue_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.PlyrPos.bloodValue)
}

// -------------------------------------------------------------------

// Plyr

// int32 plyrId = 1;
inline void Plyr::clear_plyrid() {
  plyrid_ = 0;
}
inline ::google::protobuf::int32 Plyr::plyrid() const {
  // @@protoc_insertion_point(field_get:GameMsg.Plyr.plyrId)
  return plyrid_;
}
inline void Plyr::set_plyrid(::google::protobuf::int32 value) {
  
  plyrid_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.Plyr.plyrId)
}

// .GameMsg.PlyrPos plyrPos = 2;
inline bool Plyr::has_plyrpos() const {
  return this != internal_default_instance() && plyrpos_ != NULL;
}
inline void Plyr::clear_plyrpos() {
  if (GetArenaNoVirtual() == NULL && plyrpos_ != NULL) {
    delete plyrpos_;
  }
  plyrpos_ = NULL;
}
inline const ::GameMsg::PlyrPos& Plyr::_internal_plyrpos() const {
  return *plyrpos_;
}
inline const ::GameMsg::PlyrPos& Plyr::plyrpos() const {
  const ::GameMsg::PlyrPos* p = plyrpos_;
  // @@protoc_insertion_point(field_get:GameMsg.Plyr.plyrPos)
  return p != NULL ? *p : *reinterpret_cast<const ::GameMsg::PlyrPos*>(
      &::GameMsg::_PlyrPos_default_instance_);
}
inline ::GameMsg::PlyrPos* Plyr::release_plyrpos() {
  // @@protoc_insertion_point(field_release:GameMsg.Plyr.plyrPos)
  
  ::GameMsg::PlyrPos* temp = plyrpos_;
  plyrpos_ = NULL;
  return temp;
}
inline ::GameMsg::PlyrPos* Plyr::mutable_plyrpos() {
  
  if (plyrpos_ == NULL) {
    auto* p = CreateMaybeMessage<::GameMsg::PlyrPos>(GetArenaNoVirtual());
    plyrpos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GameMsg.Plyr.plyrPos)
  return plyrpos_;
}
inline void Plyr::set_allocated_plyrpos(::GameMsg::PlyrPos* plyrpos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plyrpos_;
  }
  if (plyrpos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plyrpos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plyrpos, submessage_arena);
    }
    
  } else {
    
  }
  plyrpos_ = plyrpos;
  // @@protoc_insertion_point(field_set_allocated:GameMsg.Plyr.plyrPos)
}

// string usrName = 3;
inline void Plyr::clear_usrname() {
  usrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plyr::usrname() const {
  // @@protoc_insertion_point(field_get:GameMsg.Plyr.usrName)
  return usrname_.GetNoArena();
}
inline void Plyr::set_usrname(const ::std::string& value) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMsg.Plyr.usrName)
}
#if LANG_CXX11
inline void Plyr::set_usrname(::std::string&& value) {
  
  usrname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameMsg.Plyr.usrName)
}
#endif
inline void Plyr::set_usrname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMsg.Plyr.usrName)
}
inline void Plyr::set_usrname(const char* value, size_t size) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMsg.Plyr.usrName)
}
inline ::std::string* Plyr::mutable_usrname() {
  
  // @@protoc_insertion_point(field_mutable:GameMsg.Plyr.usrName)
  return usrname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plyr::release_usrname() {
  // @@protoc_insertion_point(field_release:GameMsg.Plyr.usrName)
  
  return usrname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plyr::set_allocated_usrname(::std::string* usrname) {
  if (usrname != NULL) {
    
  } else {
    
  }
  usrname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usrname);
  // @@protoc_insertion_point(field_set_allocated:GameMsg.Plyr.usrName)
}

// -------------------------------------------------------------------

// SyncPlyrs

// repeated .GameMsg.Plyr plyrs = 1;
inline int SyncPlyrs::plyrs_size() const {
  return plyrs_.size();
}
inline void SyncPlyrs::clear_plyrs() {
  plyrs_.Clear();
}
inline ::GameMsg::Plyr* SyncPlyrs::mutable_plyrs(int index) {
  // @@protoc_insertion_point(field_mutable:GameMsg.SyncPlyrs.plyrs)
  return plyrs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GameMsg::Plyr >*
SyncPlyrs::mutable_plyrs() {
  // @@protoc_insertion_point(field_mutable_list:GameMsg.SyncPlyrs.plyrs)
  return &plyrs_;
}
inline const ::GameMsg::Plyr& SyncPlyrs::plyrs(int index) const {
  // @@protoc_insertion_point(field_get:GameMsg.SyncPlyrs.plyrs)
  return plyrs_.Get(index);
}
inline ::GameMsg::Plyr* SyncPlyrs::add_plyrs() {
  // @@protoc_insertion_point(field_add:GameMsg.SyncPlyrs.plyrs)
  return plyrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameMsg::Plyr >&
SyncPlyrs::plyrs() const {
  // @@protoc_insertion_point(field_list:GameMsg.SyncPlyrs.plyrs)
  return plyrs_;
}

// -------------------------------------------------------------------

// BroadCast

// int32 plyrId = 1;
inline void BroadCast::clear_plyrid() {
  plyrid_ = 0;
}
inline ::google::protobuf::int32 BroadCast::plyrid() const {
  // @@protoc_insertion_point(field_get:GameMsg.BroadCast.plyrId)
  return plyrid_;
}
inline void BroadCast::set_plyrid(::google::protobuf::int32 value) {
  
  plyrid_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.BroadCast.plyrId)
}

// int32 bcType = 2;
inline void BroadCast::clear_bctype() {
  bctype_ = 0;
}
inline ::google::protobuf::int32 BroadCast::bctype() const {
  // @@protoc_insertion_point(field_get:GameMsg.BroadCast.bcType)
  return bctype_;
}
inline void BroadCast::set_bctype(::google::protobuf::int32 value) {
  
  bctype_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.BroadCast.bcType)
}

// .GameMsg.Chat plyrChat = 3;
inline bool BroadCast::has_plyrchat() const {
  return Data_case() == kPlyrChat;
}
inline void BroadCast::set_has_plyrchat() {
  _oneof_case_[0] = kPlyrChat;
}
inline void BroadCast::clear_plyrchat() {
  if (has_plyrchat()) {
    delete Data_.plyrchat_;
    clear_has_Data();
  }
}
inline const ::GameMsg::Chat& BroadCast::_internal_plyrchat() const {
  return *Data_.plyrchat_;
}
inline ::GameMsg::Chat* BroadCast::release_plyrchat() {
  // @@protoc_insertion_point(field_release:GameMsg.BroadCast.plyrChat)
  if (has_plyrchat()) {
    clear_has_Data();
      ::GameMsg::Chat* temp = Data_.plyrchat_;
    Data_.plyrchat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::GameMsg::Chat& BroadCast::plyrchat() const {
  // @@protoc_insertion_point(field_get:GameMsg.BroadCast.plyrChat)
  return has_plyrchat()
      ? *Data_.plyrchat_
      : *reinterpret_cast< ::GameMsg::Chat*>(&::GameMsg::_Chat_default_instance_);
}
inline ::GameMsg::Chat* BroadCast::mutable_plyrchat() {
  if (!has_plyrchat()) {
    clear_Data();
    set_has_plyrchat();
    Data_.plyrchat_ = CreateMaybeMessage< ::GameMsg::Chat >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:GameMsg.BroadCast.plyrChat)
  return Data_.plyrchat_;
}

// .GameMsg.PlyrPos plyrPos = 4;
inline bool BroadCast::has_plyrpos() const {
  return Data_case() == kPlyrPos;
}
inline void BroadCast::set_has_plyrpos() {
  _oneof_case_[0] = kPlyrPos;
}
inline void BroadCast::clear_plyrpos() {
  if (has_plyrpos()) {
    delete Data_.plyrpos_;
    clear_has_Data();
  }
}
inline const ::GameMsg::PlyrPos& BroadCast::_internal_plyrpos() const {
  return *Data_.plyrpos_;
}
inline ::GameMsg::PlyrPos* BroadCast::release_plyrpos() {
  // @@protoc_insertion_point(field_release:GameMsg.BroadCast.plyrPos)
  if (has_plyrpos()) {
    clear_has_Data();
      ::GameMsg::PlyrPos* temp = Data_.plyrpos_;
    Data_.plyrpos_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::GameMsg::PlyrPos& BroadCast::plyrpos() const {
  // @@protoc_insertion_point(field_get:GameMsg.BroadCast.plyrPos)
  return has_plyrpos()
      ? *Data_.plyrpos_
      : *reinterpret_cast< ::GameMsg::PlyrPos*>(&::GameMsg::_PlyrPos_default_instance_);
}
inline ::GameMsg::PlyrPos* BroadCast::mutable_plyrpos() {
  if (!has_plyrpos()) {
    clear_Data();
    set_has_plyrpos();
    Data_.plyrpos_ = CreateMaybeMessage< ::GameMsg::PlyrPos >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:GameMsg.BroadCast.plyrPos)
  return Data_.plyrpos_;
}

// int32 actionData = 5;
inline bool BroadCast::has_actiondata() const {
  return Data_case() == kActionData;
}
inline void BroadCast::set_has_actiondata() {
  _oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  if (has_actiondata()) {
    Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline ::google::protobuf::int32 BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:GameMsg.BroadCast.actionData)
  if (has_actiondata()) {
    return Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::set_actiondata(::google::protobuf::int32 value) {
  if (!has_actiondata()) {
    clear_Data();
    set_has_actiondata();
  }
  Data_.actiondata_ = value;
  // @@protoc_insertion_point(field_set:GameMsg.BroadCast.actionData)
}

// string usrName = 6;
inline void BroadCast::clear_usrname() {
  usrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BroadCast::usrname() const {
  // @@protoc_insertion_point(field_get:GameMsg.BroadCast.usrName)
  return usrname_.GetNoArena();
}
inline void BroadCast::set_usrname(const ::std::string& value) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameMsg.BroadCast.usrName)
}
#if LANG_CXX11
inline void BroadCast::set_usrname(::std::string&& value) {
  
  usrname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameMsg.BroadCast.usrName)
}
#endif
inline void BroadCast::set_usrname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameMsg.BroadCast.usrName)
}
inline void BroadCast::set_usrname(const char* value, size_t size) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameMsg.BroadCast.usrName)
}
inline ::std::string* BroadCast::mutable_usrname() {
  
  // @@protoc_insertion_point(field_mutable:GameMsg.BroadCast.usrName)
  return usrname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadCast::release_usrname() {
  // @@protoc_insertion_point(field_release:GameMsg.BroadCast.usrName)
  
  return usrname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadCast::set_allocated_usrname(::std::string* usrname) {
  if (usrname != NULL) {
    
  } else {
    
  }
  usrname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usrname);
  // @@protoc_insertion_point(field_set_allocated:GameMsg.BroadCast.usrName)
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameMsg_2eprotoc
